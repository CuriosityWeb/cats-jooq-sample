/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.DefaultSchema
import generated.jooq.Keys
import generated.jooq.enums.UsersGender
import generated.jooq.tables.records.UsersRecord

import java.lang.Class
import java.lang.String
import java.time.LocalDate
import java.util.function.Function

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object Users {

  /**
   * The reference instance of <code>USERS</code>
   */
  val USERS = new Users
}

/**
 * This class is generated by jOOQ.
 */
class Users(
  alias: Name,
  child: Table[_ <: Record],
  path: ForeignKey[_ <: Record, UsersRecord],
  aliased: Table[UsersRecord],
  parameters: Array[ Field[_] ]
)
extends TableImpl[UsersRecord](
  alias,
  DefaultSchema.DEFAULT_SCHEMA,
  child,
  path,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[UsersRecord] = classOf[UsersRecord]

  /**
   * The column <code>USERS.FIRST_NAME</code>.
   */
  val FIRST_NAME: TableField[UsersRecord, String] = createField(DSL.name("FIRST_NAME"), SQLDataType.VARCHAR(20).nullable(false), "")

  /**
   * The column <code>USERS.LAST_NAME</code>.
   */
  val LAST_NAME: TableField[UsersRecord, String] = createField(DSL.name("LAST_NAME"), SQLDataType.VARCHAR(30), "")

  /**
   * The column <code>USERS.GENDER</code>.
   */
  val GENDER: TableField[UsersRecord, UsersGender] = createField(DSL.name("GENDER"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(classOf[generated.jooq.enums.UsersGender]), "")

  /**
   * The column <code>USERS.DOB</code>.
   */
  val DOB: TableField[UsersRecord, LocalDate] = createField(DSL.name("DOB"), SQLDataType.LOCALDATE.nullable(false), "")

  /**
   * The column <code>USERS.EMAIL</code>.
   */
  val EMAIL: TableField[UsersRecord, String] = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(100).nullable(false), "")

  /**
   * The column <code>USERS.MOBILE</code>.
   */
  val MOBILE: TableField[UsersRecord, String] = createField(DSL.name("MOBILE"), SQLDataType.VARCHAR(20), "")

  private def this(alias: Name, aliased: Table[UsersRecord]) = this(alias, null, null, aliased, null)

  /**
   * Create an aliased <code>USERS</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), generated.jooq.tables.Users.USERS)

  /**
   * Create an aliased <code>USERS</code> table reference
   */
  def this(alias: Name) = this(alias, generated.jooq.tables.Users.USERS)

  /**
   * Create a <code>USERS</code> table reference
   */
  def this() = this(DSL.name("USERS"), null)

  def this(child: Table[_ <: Record], key: ForeignKey[_ <: Record, UsersRecord]) = this(Internal.createPathAlias(child, key), child, key, generated.jooq.tables.Users.USERS, null)

  override def getSchema: Schema = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA

  override def getPrimaryKey: UniqueKey[UsersRecord] = Keys.CONSTRAINT_4
  override def as(alias: String): Users = new Users(DSL.name(alias), this)
  override def as(alias: Name): Users = new Users(alias, this)
  override def as(alias: Table[_]): Users = new Users(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Users = new Users(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Users = new Users(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[_]): Users = new Users(name.getQualifiedName(), null)

  // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------
  override def fieldsRow: Row6[String, String, UsersGender, LocalDate, String, String] = super.fieldsRow.asInstanceOf[ Row6[String, String, UsersGender, LocalDate, String, String] ]

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  def mapping[U](from: (String, String, UsersGender, LocalDate, String, String) => U): SelectField[U] = convertFrom(r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6()))

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class,
   * Function)}.
   */
  def mapping[U](toType: Class[U], from: (String, String, UsersGender, LocalDate, String, String) => U): SelectField[U] = convertFrom(toType,r => from.apply(r.value1(), r.value2(), r.value3(), r.value4(), r.value5(), r.value6()))
}
